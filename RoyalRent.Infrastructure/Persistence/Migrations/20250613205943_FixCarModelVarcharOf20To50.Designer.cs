// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RoyalRent.Infrastructure.Database;

#nullable disable

namespace RoyalRent.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250613205943_FixCarModelVarcharOf20To50")]
    partial class FixCarModelVarcharOf20To50
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RoyalRent.Domain.Entities.Car", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<Guid>("CarColorId")
                        .HasColumnType("UUID")
                        .HasColumnName("carColorId");

                    b.Property<Guid>("CarMakeId")
                        .HasColumnType("UUID")
                        .HasColumnName("carMakeId");

                    b.Property<Guid>("CarTypeId")
                        .HasColumnType("UUID")
                        .HasColumnName("carTypeId");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("created_on");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(40)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("updated_on");

                    b.Property<int>("Year")
                        .HasColumnType("INT")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("CarColorId")
                        .IsUnique();

                    b.HasIndex("CarMakeId")
                        .IsUnique();

                    b.HasIndex("CarTypeId")
                        .IsUnique();

                    b.HasIndex("Name", "Model", "Year", "CarMakeId", "CarColorId", "CarTypeId");

                    b.ToTable("Cars", (string)null);
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.CarColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("CarColors", (string)null);
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.CarMake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("created_on");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("imageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("CarMakes", (string)null);
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.CarType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("created_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("CarTypes", (string)null);
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("CHAR(11)")
                        .HasColumnName("CPF");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("email");

                    b.Property<char>("Gender")
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("gender");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(650)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("name");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("CHAR(12)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("updated_on");

                    b.HasKey("Id");

                    b.HasIndex("Email", "Cpf", "Telephone");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("address");

                    b.Property<string>("Cep")
                        .HasColumnType("CHAR(8)")
                        .HasColumnName("CEP");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("created_on");

                    b.Property<string>("FederativeUnit")
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("UF");

                    b.Property<string>("Neighborhood")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("number");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("updated_on");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("UUID")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("Cep", "Address", "City", "Id");

                    b.ToTable("UsersAddresses", (string)null);
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.UserDriverLicense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("DATE")
                        .HasColumnName("birthdate");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("created_on");

                    b.Property<DateOnly>("DocumentExpirationDate")
                        .HasColumnType("DATE")
                        .HasColumnName("document_expiration_date");

                    b.Property<string>("DriverLicenseNumber")
                        .IsRequired()
                        .HasColumnType("CHAR(11)")
                        .HasColumnName("CNH");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("CHAR(9)")
                        .HasColumnName("RG");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("state");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UUID")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UsersDriverLicenses", (string)null);
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.UserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID")
                        .HasColumnName("id");

                    b.Property<bool>("ActualPassword")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("actual_password");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("created_on");

                    b.Property<string>("PasswordHashed")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("password_hashed");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TIMESTAMP WITH TIME ZONE")
                        .HasColumnName("updated_on");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UUID")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ActualPassword");

                    b.ToTable("UsersPasswords", (string)null);
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.Car", b =>
                {
                    b.HasOne("RoyalRent.Domain.Entities.CarColor", "CarColor")
                        .WithOne("Car")
                        .HasForeignKey("RoyalRent.Domain.Entities.Car", "CarColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CAR_CAR_COLOR");

                    b.HasOne("RoyalRent.Domain.Entities.CarMake", "CarMake")
                        .WithOne("Car")
                        .HasForeignKey("RoyalRent.Domain.Entities.Car", "CarMakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CAR_CAR_MAKE");

                    b.HasOne("RoyalRent.Domain.Entities.CarType", "CarType")
                        .WithOne("Car")
                        .HasForeignKey("RoyalRent.Domain.Entities.Car", "CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CAR_CAR_TYPE");

                    b.Navigation("CarColor");

                    b.Navigation("CarMake");

                    b.Navigation("CarType");
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.UserAddress", b =>
                {
                    b.HasOne("RoyalRent.Domain.Entities.User", "User")
                        .WithOne("UserAddress")
                        .HasForeignKey("RoyalRent.Domain.Entities.UserAddress", "UserId")
                        .HasConstraintName("FK_USER_USER_ADDRESSES");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.UserDriverLicense", b =>
                {
                    b.HasOne("RoyalRent.Domain.Entities.User", "User")
                        .WithOne("UserDriverLicense")
                        .HasForeignKey("RoyalRent.Domain.Entities.UserDriverLicense", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_USER_LICENSE");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.UserPassword", b =>
                {
                    b.HasOne("RoyalRent.Domain.Entities.User", "User")
                        .WithMany("UserPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_USER_USER_PASSWORD");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.CarColor", b =>
                {
                    b.Navigation("Car");
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.CarMake", b =>
                {
                    b.Navigation("Car");
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.CarType", b =>
                {
                    b.Navigation("Car");
                });

            modelBuilder.Entity("RoyalRent.Domain.Entities.User", b =>
                {
                    b.Navigation("UserAddress");

                    b.Navigation("UserDriverLicense");

                    b.Navigation("UserPasswords");
                });
#pragma warning restore 612, 618
        }
    }
}
